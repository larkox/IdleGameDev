// Generated by CoffeeScript 1.8.0
var Environment, GeneralGameScreenLoop, Loop, State, constants, loadImage, loadSound, playSound,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

constants = {
  "KEY_ENTER": 13,
  "KEY_ESC": 27,
  "KEY_LEFT": 37,
  "KEY_UP": 38,
  "KEY_RIGHT": 39,
  "KEY_DOWN": 40,
  "GENERAL": {
    "start": {
      x: 30,
      y: 30
    },
    "dimensions": {
      "w": 200,
      "h": 100
    },
    "line_height": 10
  },
  "UI": {
    "money": {
      "x": 10,
      "y": 10,
      "w": 100,
      "h": 100
    }
  },
  "INCOMES": [
    {
      "name": "freelancing",
      "left": 10,
      "each": 10,
      "income": 0,
      "level": 0,
      "cost": 1,
      "base_income": 0.1
    }, {
      "name": "engine",
      "left": 25,
      "each": 25,
      "income": 0,
      "level": 0,
      "cost": 10,
      "base_income": 1
    }, {
      "name": "game dev",
      "left": 50,
      "each": 50,
      "income": 0,
      "level": 0,
      "cost": 100,
      "base_income": 10
    }
  ]
};

State = (function() {
  function State() {
    var attribute, attribute_name, income_def, index, _i, _len, _ref;
    this.money = 1;
    this.income = [];
    _ref = constants.INCOMES;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      income_def = _ref[index];
      this.income[index] = {};
      for (attribute_name in income_def) {
        attribute = income_def[attribute_name];
        this.income[index][attribute_name] = attribute;
      }
    }
    this.setup();
  }

  State.prototype.levelUp = function(income_id) {
    if (this.income[income_id].cost <= this.money) {
      this.money -= this.income[income_id].cost;
      this.income[income_id].level += 1;
      this.income[income_id].cost += this.income[income_id].cost * 0.15;
      this.income[income_id].income += this.income[income_id].base_income;
      this.update(income_id);
      return this.updateMpS();
    }
  };

  State.prototype.updateMpS = function() {
    var acum, definition, _i, _len, _ref;
    acum = 0;
    _ref = this.income;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      definition = _ref[_i];
      acum += 32 * definition.income / definition.each;
    }
    return $("#mps").text(acum.toFixed(2));
  };

  State.prototype.update = function(income_id) {
    $("#income_" + income_id + " .level").text(this.income[income_id].level);
    $("#income_" + income_id + " .income").text(this.income[income_id].income.toFixed(2));
    $("#income_" + income_id + " .each").text((this.income[income_id].each / 32).toFixed(2));
    return $("#income_" + income_id + " .cost").text(this.income[income_id].cost.toFixed(2));
  };

  State.prototype.setup = function() {
    var element, income_def, index, text, _i, _len, _ref, _results;
    _ref = this.income;
    _results = [];
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      income_def = _ref[index];
      text = "" + income_def.name + "<br />";
      text += "Level: <span class=\"level\">" + income_def.level + "</span><br />";
      text += "Income: <span class=\"income\">" + income_def.income + "</span><br />";
      text += "Each: <span class=\"each\">" + ((income_def.each / 32).toFixed(2)) + "</span>s<br />";
      text += "Cost: <span class=\"cost\">" + income_def.cost + "</span><br />";
      element = $("<div>", {
        "class": "income_box",
        "id": "income_" + index,
        "width": 200,
        "height": 100,
        "html": text
      });
      element.click((function(state) {
        return function() {
          return state.levelUp(parseInt($(this)[0].id.split("_")[1]));
        };
      })(this));
      _results.push($("#generalContent").append(element));
    }
    return _results;
  };

  return State;

})();

loadSound = function(environment, src) {
  var request, result;
  result = {
    "loaded": {
      "_": false
    },
    "content": {}
  };
  request = new XMLHttpRequest();
  request.open("GET", src, true);
  request.responseType = "arraybuffer";
  request.onload = function() {
    if (this.readyState === 4) {
      return environment.sound_context.decodeAudioData(this.response, (function(buffer) {
        result.loaded._ = true;
        return result.content._ = buffer;
      }), function() {});
    }
  };
  request.send();
  return result;
};

playSound = function(environment, buffer) {
  var source;
  source = environment.sound_context.createBufferSource();
  source.buffer = buffer;
  source.connect(environment.sound_context.destination);
  return source.start(0);
};

Environment = (function() {
  function Environment() {
    this.loop = new GeneralGameScreenLoop(this, new State(this));
    this.loading = true;
    this.constants = constants;
    this.keys = {};
    this.data = {};
    this.sound_context = new AudioContext();
    document.onkeydown = (function(_this) {
      return function(event) {
        return _this.onKeyDown(event);
      };
    })(this);
    document.onkeyup = (function(_this) {
      return function(event) {
        return _this.onKeyUp(event);
      };
    })(this);
    document.onmousedown = (function(_this) {
      return function(event) {
        return _this.onMouseDown(event);
      };
    })(this);
    document.onmouseup = (function(_this) {
      return function(event) {
        return _this.onMouseUp(event);
      };
    })(this);
    document.onmousemove = (function(_this) {
      return function(event) {
        return _this.onMouseMove(event);
      };
    })(this);
    setTimeout(((function(_this) {
      return function() {
        return _this.tick();
      };
    })(this)), this.loop.frame_time);
    this.change_loop = false;
    this.loop_to_change = function() {};
  }

  Environment.prototype.tick = function() {
    if (this.loading) {
      this.loading = !this.loop.isReady();
      return setTimeout(((function(_this) {
        return function() {
          return _this.tick();
        };
      })(this)), this.loop.frame_time);
    } else {
      this.loop.animate(this);
      if (this.change_loop) {
        this.loop = this.loop_to_change();
        this.change_loop = false;
      }
      return setTimeout(((function(_this) {
        return function() {
          return _this.tick();
        };
      })(this)), this.loop.frame_time);
    }
  };

  Environment.prototype.onKeyDown = function(event) {
    if (!this.loading) {
      this.keys[event.keyCode] = true;
      return this.loop.onKeyDown(event, this);
    }
  };

  Environment.prototype.onKeyUp = function(event) {
    if (!this.loading) {
      this.keys[event.keyCode] = false;
      return this.loop.onKeyUp(event, this);
    }
  };

  Environment.prototype.onMouseDown = function(event) {
    if (!this.loading) {
      return this.loop.onMouseDown(event, this);
    }
  };

  Environment.prototype.onMouseUp = function(event) {
    if (!this.loading) {
      return this.loop.onMouseUp(event, this);
    }
  };

  Environment.prototype.onMouseMove = function(event) {
    if (!this.loading) {
      return this.loop.onMouseMove(event, this);
    }
  };

  return Environment;

})();

Loop = (function() {
  function Loop(environment) {
    this.frame_time = 1000 / 32;
  }

  Loop.prototype.isReady = function() {
    return true;
  };

  Loop.prototype.animate = function(environment) {};

  Loop.prototype.onKeyDown = function(event, environment) {};

  Loop.prototype.onKeyUp = function(event, environment) {};

  Loop.prototype.onMouseDown = function(event, environment) {};

  Loop.prototype.onMouseUp = function(event, environment) {};

  Loop.prototype.onMouseMove = function(event, environment) {};

  return Loop;

})();

GeneralGameScreenLoop = (function(_super) {
  __extends(GeneralGameScreenLoop, _super);

  function GeneralGameScreenLoop(environment, state) {
    this.state = state;
    GeneralGameScreenLoop.__super__.constructor.call(this, environment);
  }

  GeneralGameScreenLoop.prototype.animate = function(environment) {
    var key, value, _ref;
    _ref = this.state.income;
    for (key in _ref) {
      value = _ref[key];
      value.left -= 1;
      if (value.left <= 0) {
        this.state.money += value.income;
        value.left = value.each;
      }
    }
    return $("#money").text(this.state.money.toFixed(2));
  };

  return GeneralGameScreenLoop;

})(Loop);

loadImage = function(src) {
  var result;
  result = {
    "loaded": {
      "_": false
    },
    "content": new Image
  };
  result.content.onload = function() {
    return result.loaded._ = true;
  };
  result.content.src = src;
  return result;
};
