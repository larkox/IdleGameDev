// Generated by CoffeeScript 1.8.0
var Environment, GeneralGameScreenLoop, Loop, State, constants, loadImage, loadSound, playSound, writeNumber,
  __modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

constants = {
  "KEY_ENTER": 13,
  "KEY_ESC": 27,
  "KEY_LEFT": 37,
  "KEY_UP": 38,
  "KEY_RIGHT": 39,
  "KEY_DOWN": 40,
  "GENERAL": {
    "start": {
      x: 30,
      y: 30
    },
    "dimensions": {
      "w": 200,
      "h": 100
    },
    "line_height": 10
  },
  "UI": {
    "money": {
      "x": 10,
      "y": 10,
      "w": 100,
      "h": 100
    }
  },
  "INCOMES": [
    {
      "name": "Freelancing",
      "description": "The best way to start gaining experience is freelancing. Develop small parts for big companies and you can start earning money.",
      "each": 100,
      "cost": 1,
      "base_income": 0.01
    }, {
      "name": "Engine tweaks",
      "description": "Engines are huge, and sometimes need to be tweaked. Become a master of engines tweaking the work of people smarter than you.",
      "each": 1000,
      "cost": 5,
      "base_income": 0.5
    }, {
      "name": "Web Games",
      "description": "Low risk low gain games. The best for begginers.",
      "each": 5000,
      "cost": 50,
      "base_income": 10
    }, {
      "name": "Mobile Games",
      "description": "You can afford buying yourself a phone, so it is time to start developing for these little fiends.",
      "each": 10000,
      "cost": 250,
      "base_income": 140
    }, {
      "name": "Mobile Ports",
      "description": "Creativity is a plus, but going on under the wing of the giants is profitable. Start creating small ports for famous games. That's where the money is.",
      "each": 35000,
      "cost": 1700,
      "base_income": 600
    }
  ],
  "STAFF": [
    {
      "name": "Billy",
      "scope": "everything",
      "description": "Good old Billy. He is not the best, but he can do everything.",
      "base_effect": 0.01,
      "cost": 500
    }, {
      "name": "Uncle Tom",
      "scope": [0],
      "description": "He does not like games, but he likes coding. Freelancing is his passion, and he knows how to do it.",
      "base_effect": 0.1,
      "cost": 750
    }, {
      "name": "Barbara",
      "scope": [2, 3, 4],
      "description": "Babs is the most talented artist you know. But that being said, you do not know many artists. Either way, any game looks better with her.",
      "base_effect": 0.1,
      "cost": 1000
    }
  ],
  "MARKETING": [
    {
      "name": "Games All Around",
      "scope": "everything",
      "description": "Including adds here you may find more jobs from any field",
      "base_effect": 0.99,
      "cost": 500
    }, {
      "name": "Code4Money",
      "scope": [0],
      "description": "Everyone love this site. Need a code for sorting your data? Code4Money. Need a code for doing your laundry? Code4Money. Need a code for the security of the next rocket to Mars? Code4Money. There is always a freelancer willing to do program your code.",
      "base_effect": 0.90,
      "cost": 1200
    }
  ]
};

State = (function() {
  function State() {
    var attribute, attribute_name, income_def, index, load, marketing_def, staff_def, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    if (localStorage.money != null) {
      this.money = JSON.parse(localStorage.money);
    } else {
      this.money = 1;
    }
    if (localStorage.levels != null) {
      this.levels = JSON.parse(localStorage.levels);
      load = true;
    } else {
      this.levels = {};
      this.levels.version = 1;
      this.levels.income = [];
      this.levels.staff = [];
      this.levels.marketing = [];
      load = false;
    }
    this.income = [];
    _ref = constants.INCOMES;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      income_def = _ref[index];
      this.income[index] = {};
      for (attribute_name in income_def) {
        attribute = income_def[attribute_name];
        this.income[index][attribute_name] = attribute;
      }
      this.initIncome(index, load);
    }
    this.staff = [];
    _ref1 = constants.STAFF;
    for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
      staff_def = _ref1[index];
      this.staff[index] = {};
      for (attribute_name in staff_def) {
        attribute = staff_def[attribute_name];
        this.staff[index][attribute_name] = attribute;
      }
      this.initStaff(index, load);
    }
    this.marketing = [];
    _ref2 = constants.MARKETING;
    for (index = _k = 0, _len2 = _ref2.length; _k < _len2; index = ++_k) {
      marketing_def = _ref2[index];
      this.marketing[index] = {};
      for (attribute_name in marketing_def) {
        attribute = marketing_def[attribute_name];
        this.marketing[index][attribute_name] = attribute;
      }
      this.initMarketing(index, load);
    }
    this.setup();
  }

  State.prototype.animate = function(environment, delta) {
    var definition, index, left, name, object, quantity, times, _i, _j, _len, _len1, _ref, _ref1, _results;
    _ref = this.income;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      definition = _ref[index];
      definition.left -= delta;
      if (definition.left <= 0) {
        times = Math.min(Number.MAX_VALUE, -(Math.floor(definition.left / definition.current_each)));
        quantity = Math.min(Number.MAX_VALUE, definition.income * (1 + definition.powerup));
        this.money = Math.min(Number.MAX_VALUE, this.money + times * quantity);
        left = __modulo(definition.left, definition.current_each);
        if (left === 0) {
          left = definition.current_each;
        }
        definition.left = Math.min(Number.MAX_VALUE, left);
      }
    }
    environment.money_span.text(writeNumber(this.money));
    _ref1 = (function() {
      switch (environment.current) {
        case "buttons_incomes":
          return {
            "object": this.income,
            "name": "income"
          };
        case "buttons_staff":
          return {
            "object": this.staff,
            "name": "staff"
          };
        case "buttons_marketing":
          return {
            "object": this.marketing,
            "name": "marketing"
          };
      }
    }).call(this), object = _ref1.object, name = _ref1.name;
    _results = [];
    for (index = _j = 0, _len1 = object.length; _j < _len1; index = ++_j) {
      definition = object[index];
      if (this.money >= definition.cost) {
        definition.div.css("background-color", "green");
        _results.push(definition.div.css("color", "black"));
      } else {
        definition.div.css("background-color", "red");
        _results.push(definition.div.css("color", "white"));
      }
    }
    return _results;
  };

  State.prototype.levelUpIncome = function(income_id) {
    if (this.income[income_id].cost <= this.money) {
      this.money -= this.income[income_id].cost;
      this.income[income_id].level += 1;
      this.levels.income[income_id] += 1;
      this.income[income_id].cost += this.income[income_id].cost * 0.15;
      this.income[income_id].income += this.income[income_id].base_income;
      this.updateIncome(income_id);
      this.updateMpS();
      if (this.income[income_id].level === 1 && this.income.length > income_id + 1) {
        return this.income[income_id + 1].div.fadeIn(1000);
      }
    }
  };

  State.prototype.levelUpStaff = function(staff_id) {
    var id, income, index, _i, _j, _len, _len1, _ref, _ref1;
    if (this.staff[staff_id].cost <= this.money) {
      this.money -= this.staff[staff_id].cost;
      this.staff[staff_id].level += 1;
      this.levels.staff[staff_id] += 1;
      this.staff[staff_id].cost += this.staff[staff_id].cost * 0.50;
      this.staff[staff_id].current += this.staff[staff_id].base_effect;
      if (this.staff[staff_id].scope === "everything") {
        _ref = this.income;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          income = _ref[index];
          income.powerup += this.staff[staff_id].base_effect;
          this.updateIncome(index);
        }
      } else {
        _ref1 = this.staff[staff_id].scope;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          id = _ref1[_j];
          this.income[id].powerup += this.staff[staff_id].base_effect;
          this.updateIncome(id);
        }
      }
      this.updateStaff(staff_id);
      this.updateMpS();
      if (this.staff[staff_id].level === 1 && this.staff.length > staff_id + 1) {
        return this.staff[staff_id + 1].div.fadeIn(1000);
      }
    }
  };

  State.prototype.levelUpMarketing = function(marketing_id) {
    var id, income, index, _i, _j, _len, _len1, _ref, _ref1;
    if (this.marketing[marketing_id].cost <= this.money) {
      this.money -= this.marketing[marketing_id].cost;
      this.marketing[marketing_id].level += 1;
      this.levels.marketing[marketing_id] += 1;
      this.marketing[marketing_id].cost += this.marketing[marketing_id].cost * 1.00;
      this.marketing[marketing_id].current = this.marketing[marketing_id].current * this.marketing[marketing_id].base_effect;
      if (this.marketing[marketing_id].scope === "everything") {
        _ref = this.income;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          income = _ref[index];
          income.reduction = income.reduction * this.marketing[marketing_id].base_effect;
          income.current_each = Math.ceil(income.each * income.reduction);
          if (income.current_each === 0) {
            income.current_each = Number.MIN_VALUE;
          }
          this.updateIncome(index);
        }
      } else {
        _ref1 = this.marketing[marketing_id].scope;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          id = _ref1[_j];
          this.income[id].reduction = this.income[id].reduction * this.marketing[marketing_id].base_effect;
          this.income[id].current_each = Math.ceil(this.income[id].each * this.income[id].reduction);
          if (this.income[id].current_each === 0) {
            this.income[id].current_each = Number.MIN_VALUE;
          }
          this.updateIncome(id);
        }
      }
      this.updateMarketing(marketing_id);
      this.updateMpS();
      if (this.marketing[marketing_id].level === 1 && this.marketing.length > marketing_id + 1) {
        return this.marketing[marketing_id + 1].div.fadeIn(1000);
      }
    }
  };

  State.prototype.updateMpS = function() {
    var acum, definition, _i, _len, _ref;
    acum = 0;
    _ref = this.income;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      definition = _ref[_i];
      acum += definition.income * (1 + definition.powerup) / definition.current_each;
    }
    acum = Math.min(Number.MAX_VALUE, acum * 1000);
    return $("span#mps").text(writeNumber(acum));
  };

  State.prototype.updateIncome = function(income_id) {
    var div;
    div = this.income[income_id].div;
    div.find(".level").text(this.income[income_id].level);
    div.find(".income").text(writeNumber(this.income[income_id].income * (1 + this.income[income_id].powerup)));
    div.find(".powerup").text(writeNumber(this.income[income_id].powerup));
    div.find(".each").text(writeNumber(this.income[income_id].current_each / 1000));
    return div.find(".cost").text(writeNumber(this.income[income_id].cost));
  };

  State.prototype.updateStaff = function(staff_id) {
    var div;
    div = this.staff[staff_id].div;
    div.find(".level").text(this.staff[staff_id].level);
    div.find(".current").text(writeNumber(this.staff[staff_id].current * 100));
    return div.find(".cost").text(writeNumber(this.staff[staff_id].cost));
  };

  State.prototype.updateMarketing = function(marketing_id, div) {
    div = this.marketing[marketing_id].div;
    div.find(".level").text(this.marketing[marketing_id].level);
    div.find(".current").text(writeNumber(this.marketing[marketing_id].current * 100));
    return div.find(".cost").text(writeNumber(this.marketing[marketing_id].cost));
  };

  State.prototype.setup = function() {
    var container, element, income, income_def, index, marketing_def, scope, scope_index, staff_def, text, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _results;
    container = $("div#incomes_frame");
    _ref = this.income;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      income_def = _ref[index];
      text = "" + income_def.name + "<br />";
      text += "Level: <span class=\"level\">" + income_def.level + "</span><br />";
      text += "Income: <span class=\"income\">" + (writeNumber(income_def.income)) + "</span><br />";
      text += "Each: <span class=\"each\">" + (writeNumber(income_def.each / 1000)) + "</span>s<br />";
      text += "Cost: <span class=\"cost\">" + (writeNumber(income_def.cost)) + "</span><br />";
      element = $("<div>", {
        "class": "income_box",
        "id": "income_" + index,
        "title": income_def.description,
        "html": text
      });
      element.click((function(state) {
        return function() {
          return state.levelUpIncome(parseInt($(this)[0].id.split("_")[1]));
        };
      })(this));
      element.on("tap", (function(state) {
        return function() {
          return state.levelUpIncome(parseInt($(this)[0].id.split("_")[1]));
        };
      })(this));
      element.css("display", "none");
      element.hide();
      income_def.div = element;
      container.append(element);
      if (income_def.level > 0 || index === 0 || index > 0 && this.income[index - 1].level > 0) {
        income_def.div.fadeIn(1000);
      }
    }
    container = $("div#staff_frame");
    _ref1 = this.staff;
    for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
      staff_def = _ref1[index];
      text = "" + staff_def.name + "<br />";
      text += "Level: <span class=\"level\">" + staff_def.level + "</span><br />";
      if (staff_def.scope === "everything") {
        scope = "everything";
      } else {
        scope = "";
        _ref2 = staff_def.scope;
        for (scope_index = _k = 0, _len2 = _ref2.length; _k < _len2; scope_index = ++_k) {
          income = _ref2[scope_index];
          scope += this.income[income].name;
          if (scope_index !== staff_def.scope.length - 1) {
            scope += ", ";
          }
        }
      }
      text += "Scope: <span class=\"scope\">" + scope + "</span><br />";
      text += "Current: <span class=\"current\">" + (writeNumber(staff_def.current * 100)) + "</span>%<br />";
      text += "Cost: <span class=\"cost\">" + (writeNumber(staff_def.cost)) + "</span><br />";
      element = $("<div>", {
        "class": "staff_box",
        "id": "staff_" + index,
        "title": staff_def.description,
        "html": text
      });
      element.click((function(state) {
        return function() {
          return state.levelUpStaff(parseInt($(this)[0].id.split("_")[1]));
        };
      })(this));
      element.on("tap", (function(state) {
        return function() {
          return state.levelUpStaff(parseInt($(this)[0].id.split("_")[1]));
        };
      })(this));
      element.css("display", "none");
      element.hide();
      staff_def.div = element;
      container.append(element);
      if (staff_def.level > 0 || index === 0 || index > 0 && this.staff[index - 1].level > 0) {
        staff_def.div.fadeIn(1000);
      }
    }
    container = $("div#marketing_frame");
    _ref3 = this.marketing;
    _results = [];
    for (index = _l = 0, _len3 = _ref3.length; _l < _len3; index = ++_l) {
      marketing_def = _ref3[index];
      text = "" + marketing_def.name + "<br />";
      text += "Level: <span class=\"level\">" + marketing_def.level + "</span><br />";
      if (marketing_def.scope === "everything") {
        scope = "everything";
      } else {
        scope = "";
        _ref4 = marketing_def.scope;
        for (scope_index = _m = 0, _len4 = _ref4.length; _m < _len4; scope_index = ++_m) {
          income = _ref4[scope_index];
          scope += this.income[income].name;
          if (scope_index !== marketing_def.scope.length - 1) {
            scope += ", ";
          }
        }
      }
      text += "Scope: <span class=\"scope\">" + scope + "</span><br />";
      text += "Current: <span class=\"current\">" + (writeNumber(marketing_def.current * 100)) + "</span>%<br />";
      text += "Cost: <span class=\"cost\">" + (writeNumber(marketing_def.cost)) + "</span><br />";
      element = $("<div>", {
        "class": "marketing_box",
        "id": "marketing_" + index,
        "title": marketing_def.description,
        "html": text
      });
      element.click((function(state) {
        return function() {
          return state.levelUpMarketing(parseInt($(this)[0].id.split("_")[1]));
        };
      })(this));
      element.on("tap", (function(state) {
        return function() {
          return state.levelUpMarketing(parseInt($(this)[0].id.split("_")[1]));
        };
      })(this));
      element.css("display", "none");
      element.hide();
      marketing_def.div = element;
      container.append(element);
      if (marketing_def.level > 0 || index === 0 || index > 0 && this.marketing[index - 1].level > 0) {
        _results.push(marketing_def.div.fadeIn(1000));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  State.prototype.initIncome = function(index, load) {
    if (load) {
      if (this.levels.version === 1) {
        this.income[index].level = this.levels.income[index];
        this.income[index].income = this.income[index].level * this.income[index].base_income;
        this.income[index].cost = this.income[index].cost * (Math.pow(1.15, this.income[index].level));
        this.income[index].current_each = Math.ceil(this.income[index].each);
        this.income[index].left = this.income[index].current_each;
        this.income[index].powerup = 0;
        return this.income[index].reduction = 1;
      }
    } else {
      this.income[index].level = 0;
      this.levels.income[index] = 0;
      this.income[index].income = 0;
      this.income[index].current_each = Math.ceil(this.income[index].each);
      this.income[index].left = this.income[index].current_each;
      this.income[index].powerup = 0;
      return this.income[index].reduction = 1;
    }
  };

  State.prototype.initStaff = function(index, load) {
    var id, income, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
    if (load) {
      if (this.levels.version === 1) {
        this.staff[index].level = this.levels.staff[index];
        this.staff[index].cost = this.staff[index].cost * (Math.pow(1.50, this.staff[index].level));
        this.staff[index].current = this.staff[index].base_effect * this.staff[index].level;
        if (this.staff[index].scope === "everything") {
          _ref = this.income;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            income = _ref[_i];
            _results.push(income.powerup += this.staff[index].base_effect);
          }
          return _results;
        } else {
          _ref1 = this.staff[index].scope;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            id = _ref1[_j];
            _results1.push(this.income[id].powerup += this.staff[index].base_effect);
          }
          return _results1;
        }
      }
    } else {
      this.staff[index].current = 0;
      this.staff[index].level = 0;
      return this.levels.staff[index] = 0;
    }
  };

  State.prototype.initMarketing = function(index, load) {
    var id, income, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
    if (load) {
      if (this.levels.version === 1) {
        this.marketing[index].level = this.levels.marketing[index];
        this.marketing[index].cost = this.marketing[index].cost * (Math.pow(2, this.marketing[index].level));
        this.marketing[index].current = 1 * (Math.pow(this.marketing[index].base_effect, this.marketing[index].level));
        if (this.marketing[index].scope === "everything") {
          _ref = this.income;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            income = _ref[_i];
            income.reduction = income.reduction * this.marketing[index].current;
            income.current_each = Math.ceil(income.each * income.reduction);
            if (income.current_each === 0) {
              _results.push(income.current_each = Number.MIN_VALUE);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else {
          _ref1 = this.marketing[index].scope;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            id = _ref1[_j];
            this.income[id].reduction = this.income[id].reduction * this.marketing[index].current;
            this.income[id].current_each = Math.ceil(this.income[id].each * this.income[id].reduction);
            if (this.income[id].current_each === 0) {
              _results1.push(this.income[id].current_each = Number.MIN_VALUE);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }
      }
    } else {
      this.marketing[index].level = 0;
      this.levels.marketing[index] = 0;
      return this.marketing[index].current = 0;
    }
  };

  return State;

})();

writeNumber = function(number) {
  var expr, unit;
  unit = 0;
  while (number > 1000 || unit === 8) {
    number = number / 1000;
    unit += 1;
  }
  expr = (function() {
    switch (unit) {
      case 0:
        return "";
      case 1:
        return "k";
      case 2:
        return "M";
      case 3:
        return "G";
      case 4:
        return "T";
      case 5:
        return "P";
      case 6:
        return "E";
      case 7:
        return "Z";
      case 8:
        return "Y";
    }
  })();
  return number.toFixed(2) + expr;
};

loadSound = function(environment, src) {
  var request, result;
  result = {
    "loaded": {
      "_": false
    },
    "content": {}
  };
  request = new XMLHttpRequest();
  request.open("GET", src, true);
  request.responseType = "arraybuffer";
  request.onload = function() {
    if (this.readyState === 4) {
      return environment.sound_context.decodeAudioData(this.response, (function(buffer) {
        result.loaded._ = true;
        return result.content._ = buffer;
      }), function() {});
    }
  };
  request.send();
  return result;
};

playSound = function(environment, buffer) {
  var source;
  source = environment.sound_context.createBufferSource();
  source.buffer = buffer;
  source.connect(environment.sound_context.destination);
  return source.start(0);
};

Environment = (function() {
  function Environment() {
    this.loop = new GeneralGameScreenLoop(new State(this));
    this.since_saved = 0;
    this.loading = true;
    this.constants = constants;
    this.keys = {};
    this.data = {};
    this.time = new Date();
    this.sound_context = new AudioContext();
    this.current = $("#buttons_incomes")[0].id;
    document.onkeydown = (function(_this) {
      return function(event) {
        return _this.onKeyDown(event);
      };
    })(this);
    document.onkeyup = (function(_this) {
      return function(event) {
        return _this.onKeyUp(event);
      };
    })(this);
    document.onmousedown = (function(_this) {
      return function(event) {
        return _this.onMouseDown(event);
      };
    })(this);
    document.onmouseup = (function(_this) {
      return function(event) {
        return _this.onMouseUp(event);
      };
    })(this);
    document.onmousemove = (function(_this) {
      return function(event) {
        return _this.onMouseMove(event);
      };
    })(this);
    this.change_loop = false;
    this.loop_to_change = function() {};
    $("div#buttons div").click(this.getClickFunction());
    $("div#buttons div").on("touch", this.getClickFunction());
    $("div#control_save").click((function(_this) {
      return function() {
        return _this.save();
      };
    })(this));
    $("div#control_save").on("touch", (function(_this) {
      return function() {
        return _this.save();
      };
    })(this));
    $("div#control_delete").click((function(_this) {
      return function() {
        return _this["delete"]();
      };
    })(this));
    $("div#control_delete").on("touch", (function(_this) {
      return function() {
        return _this["delete"]();
      };
    })(this));
    this.money_span = $("span#money");
    this.fps_span = $("span#fps");
    this.info_div = $("div#info");
    setTimeout(((function(_this) {
      return function() {
        return _this.tick();
      };
    })(this)), this.loop.frame_time);
  }

  Environment.prototype.getClickFunction = function() {
    return (function(environment) {
      return function() {
        var id;
        id = $(this)[0].id;
        if (id !== environment.current) {
          switch (environment.current) {
            case "buttons_incomes":
              $("#incomes_frame").slideToggle(1000).queue();
              break;
            case "buttons_staff":
              $("#staff_frame").slideToggle(1000).queue();
              break;
            case "buttons_marketing":
              $("#marketing_frame").slideToggle(1000).queue();
          }
          switch (id) {
            case "buttons_incomes":
              $("#incomes_frame").slideToggle(1000).queue();
              break;
            case "buttons_staff":
              $("#staff_frame").slideToggle(1000).queue();
              break;
            case "buttons_marketing":
              $("#marketing_frame").slideToggle(1000).queue();
          }
          return environment.current = id;
        }
      };
    })(this);
  };

  Environment.prototype.tick = function() {
    var delta;
    if (this.loading) {
      this.loading = !this.loop.isReady();
      return setTimeout(((function(_this) {
        return function() {
          return _this.tick();
        };
      })(this)), this.loop.frame_time);
    } else {
      delta = this.time;
      this.time = new Date();
      delta = this.time - delta;
      this.since_saved += delta;
      if (this.since_saved > 10000) {
        this.since_saved = 0;
        this.save();
      }
      this.fps_span.text((1000 / delta).toFixed(2));
      this.loop.animate(this, delta);
      if (this.change_loop) {
        this.loop = this.loop_to_change();
        this.change_loop = false;
      }
      return setTimeout(((function(_this) {
        return function() {
          return _this.tick();
        };
      })(this)), this.loop.frame_time - (new Date() - this.time));
    }
  };

  Environment.prototype.onKeyDown = function(event) {
    if (!this.loading) {
      this.keys[event.keyCode] = true;
      return this.loop.onKeyDown(event, this);
    }
  };

  Environment.prototype.onKeyUp = function(event) {
    if (!this.loading) {
      this.keys[event.keyCode] = false;
      return this.loop.onKeyUp(event, this);
    }
  };

  Environment.prototype.onMouseDown = function(event) {
    if (!this.loading) {
      return this.loop.onMouseDown(event, this);
    }
  };

  Environment.prototype.onMouseUp = function(event) {
    if (!this.loading) {
      return this.loop.onMouseUp(event, this);
    }
  };

  Environment.prototype.onMouseMove = function(event) {
    if (!this.loading) {
      return this.loop.onMouseMove(event, this);
    }
  };

  Environment.prototype.save = function() {
    localStorage.money = JSON.stringify(this.loop.state.money);
    localStorage.levels = JSON.stringify(this.loop.state.levels);
    this.info_div.text("Game Saved");
    return this.info_div.fadeIn(1000).fadeOut(1000);
  };

  Environment.prototype["delete"] = function() {
    if (confirm("Do you really want to delete all your progress?")) {
      localStorage.removeItem("money");
      localStorage.removeItem("levels");
      return location.reload();
    }
  };

  return Environment;

})();

Loop = (function() {
  function Loop() {
    this.frame_time = 1000 / 32;
  }

  Loop.prototype.isReady = function() {
    return true;
  };

  Loop.prototype.animate = function() {};

  Loop.prototype.onKeyDown = function(event, environment) {};

  Loop.prototype.onKeyUp = function(event, environment) {};

  Loop.prototype.onMouseDown = function(event, environment) {};

  Loop.prototype.onMouseUp = function(event, environment) {};

  Loop.prototype.onMouseMove = function(event, environment) {};

  return Loop;

})();

GeneralGameScreenLoop = (function(_super) {
  __extends(GeneralGameScreenLoop, _super);

  function GeneralGameScreenLoop(state) {
    this.state = state;
    GeneralGameScreenLoop.__super__.constructor.call(this);
  }

  GeneralGameScreenLoop.prototype.animate = function(environment, delta) {
    return this.state.animate(environment, delta);
  };

  return GeneralGameScreenLoop;

})(Loop);

loadImage = function(src) {
  var result;
  result = {
    "loaded": {
      "_": false
    },
    "content": new Image
  };
  result.content.onload = function() {
    return result.loaded._ = true;
  };
  result.content.src = src;
  return result;
};
